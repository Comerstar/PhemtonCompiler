|"""""""| |"""""""| |""\   /""| |"""""""|  /"""""\            /"/ |"|
| |"""""' | |"""""' |   \ /   | '""| |""' | |"""| |          / /  | |
| '"""|   | '"""|   | |\ V /| |    | |    | |   | | |"""""| /  '""' '"|
| |"""'   | |"""'   | | \ / | |    | |    | |___| | '"""""' '"""""| |"'
|_|       |_""""""| |_|  V  |_|    |_|     \_____/                |_|

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    /"""".    /"""""""/ /"/    /"/ /"""""""/ /"/       .-"""'.   /""""".  /"""""""/ /""""".
   / /""\ \  / /"""""' / /    / / / /"""""' / /       / /""/ /  / /""/ / / /"""""' / /""/ /
  / /   / / / '"""/   / /    / / / '"""/   / /       / /  / /  / '""' / / '"""/   / '""'."
 / /__.'.' / /"""'    '. '.-'.' / /"""'   / /_____  / /__/ /  / /"""   / /"""'   / /"\ \
/____.-'  /_'"""""/     ".-"   /_'"""""/ /_______/  '.__--'  /_/      / '"""""/ /_/  /_/

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
   .-"""'.  /"/  /"/ /"""""""/ /"""".    /"""""""/
  / /""""" / /  / / '""/ /""' / /""\ \  / /"""""'
 / /  /"/ / /  / /    / /    / /   / / / '"""/
/ /__/ / / /__/ / ___/ /__  / /__.'.' / /"""'
'.__--'  '.__--' /_______/ /____.-'  /_'"""""/

""""""""""""""""""""""""""""""""""""""""""""""

Femto-4 Developer Guide
"""""""""""""""""""""""""

What is the Femto-4?
""""""""""""""""""""
The Femto-4 is a simulated console constructed in CircuitVerse. The latest version can be found here: 
https://circuitverse.org/users/4699/projects/femto-4v2-5-computer
It is named in reference to the Pico-8. 
If you have any questions, or you have written a cart and want me to see it/add it to the main branch, feel free to leave a comment on the project itself. 

What can the Femto-4 Do?
""""""""""""""""""""""""
Immediate, direct, and indirect memory access
Add, subtract, left shift, right shift, basic binary logic, multiply, divide
Jumps, and conditional jumps
Drive a 16x16 pixel screen
Read controller and keyboard inputs
Output text
Save data into a EEPROM bank
Fast execution
Hold 512kx16b of data in a cart
Push and pop from a stack

This guide will cover how to create and program a cart, as well as how to use all of the Femto-4's features. 
Bits will be refered to from least significant to most significant, with the least significant bit being 0, and the most significant being f. 

Creating Carts
""""""""""""""
Having forked the project, you can create your own cart either by overwriting an existing cart, or by copying and pasting the cart design into a new subcircuit and rearranging the connections to match the standard cart's design. In the cart you can see a subcircuit labelled CConnecter. Down it are 64 connections, C and DO from 1 to 32. Connected to them are likely to be a few subcircuits from the old cart. Inside these subcircuits are the EEPROMs that will store the program. To create a new 16kx16b EEPROM bank, copy and paste the contents of a pre-existing ROM bank into a new subcircuit, and rearrange the connections to match the connections of the old subcircuit. There are a few other useful memory banks which can be added to the cart. First is the 16kx16b RAM bank, which can be used to increase the RAM available to the Femto-4. Second is the 16Kx16b EEPROMUTL which holds a collection of utility functions. These can be inserted into the cart like any other EEPROM bank. Note that most EEPROM banks do not have all the EEPROM chips they could have. I have not yet needed more than four EEPROM chips, but if you were programming something with a particularly large data table, you might need more. 

Programming the Femto-4
"""""""""""""""""""""""
Femto-4 code can be written in assembly in a text file, which can then be copied and pasted into Assembly.txt. Running the assembler will then convert the code into machine code in MachineCode.txt. Each line holds 1Kx16b, and therefore must be loaded into separate 1Kx16b EEPROM banks. To insert your code into the EEPROM bank, copy one line (without the enter) from the machine code, and then go to the 16kx16b EEPROM bank where you want to load the program into. Then click load data and paste in the machine code and click OK. This will then load in the machine code into the EEPROM bank. The EEPROM banks are ordered left to right, top to bottom. 

The Femto-4 Assembly Language
"""""""""""""""""""""""""""""
Here are all the instructions the Femto-4 can interpret, and what they do. 
PC = Program Counter
ACC = Accumulator
[address] = the value stored at that address in memory

Simple:
PWS: Pause, Expects 0 operands, Pauses fast execution
GRF: Graphics, Expects 0 operands, Pauses fast execution and updates graphics in graphics control mode
LDV: Load Immediate, Expects 2 operands, Loads operand1 into operand2
LDD: Load Direct, Expects 2 operands, Loads [operand1] into operand2
LDI: Load Indirect, Expects 2 operands, Loads [[operand1]] into operand2
LDP: Load PC, Expects 1 operand, Loads [PC] into operand1
LDA: Load ACC, Expects 1 operand, Loads [ACC] into operand1
PSV: Push Immediate, Expects 1 operand, Pushes operand1 onto the stack
PSD: Push Direct, Expects 1 operand, Pushes [operand1] onto the stack
PPD: Pop Direct, Expects 1 operand, Pops from the stack, and loads the value into operand1
JMP: Jump Immediate, Expects 1 operand, Jumps PC to operand1
JPD: Jump Direct, Expects 1 operand, Jumps PC to [operand1]

Simple (v2.2 and beyond only):
LIV: Load Immediate Indirect, Expects 2 operands, Loads operand1 into [operand2]
LID: Load Direct Indirect, Expects 2 operands, Loads [operand1] into [operand2]
LII: Load Indirect Indirect, Expects 2 operands, Loads [[operand1]] into [operand2]
LIP: Load PC Indirect, Epxects 1 operand, Loads [PC] into [operand1]
LIA: Load ACC Indirect, Expects 1 operand, Loads [ACC] into [opernad1]
PSI: Push Indirect, Expects 1 operand, Pushes [[operand1]] onto the stack
PPI: Pop Indirect, Expects 1 operand, Pops from the stack, and loads the value into [operand1]

ALU instructions 1:
ANR: ALU Register No Load, Expects 1 operand, Performs the specified ALU instruction on registers specified by operand1, and does not load ACC result
ANV: ALU Immediate No Load, Expects 2 operands, Performs the specified ALU instruction with A=operand1 and B=operand 2, and does not load ACC result
AND: ALU Direct No Load, Expects 2 operands, Performs the specified ALU instruction with A=[operand1] and B=[operand 2], and does not load ACC result
ANB: ALU Both No Load, Expects 2 operands, Performs the specified ALU instruction with A=operand1 and B=[operand 2], and does not load ACC result
ALR: ALU Register Load, Expects 2 operands, Performs the specified ALU instruction on registers specified by operand1, and loads ACC result into operand2
ALV: ALU Immediate Load, Expects 3 operands, Performs the specified ALU instruction with A=operand1 and B=operand 2, and loads ACC result into operand3
ALD: ALU Direct Load, Expects 2 operands, Performs the specified ALU instruction with A=[operand1] and B=[operand 2], and loads ACC result into operand3
ALB: ALU Both Load, Expects 2 operands, Performs the specified ALU instruction with A=operand1 and B=[operand 2], and loads ACC result into operand3

ALU instructions 2: 
ADD: Add, Performs A+B
SBA: Subtract A, Performs A-B
SBB: Subtract B, Performs B-A
ICA: Increment A, Performs A+1 
ICB: Increment B, Performs B+1
NGA: Negate A, Performs -A
NGB: Negate B, Performs -B
NTA: NOT A, Performs NOT A
NTB: NOT B Performs NOT B
ORR: OR, Performs A OR B
NOR: NOR, Performs A NOR B
AND: AND, Performs A AND B
NND: NAND, Performs A NAND B
XOR: XOR, Performs A XOR B
XNR: XNOR, Performs A XNOR B
SLA: Shift Left A, Shifts A left by 1 bit. Most significant bit moves to carry
SLB: Shift Left B, Shifts B left by 1 bit. Most significant bit moves to carry
INA: In A, Passes A into ACC
INB: IN B, Passes B into ACC
HGH: High, Returns 0xffff
LOW: Low, Returns 0x0000
SRA: Shift Right A, Shifts A right by 1 bit. Least significant bit moves to carry
SRB: Shift Right B, Shifts B right by 1 bit. Least significant bit moves to carry
MLT: Multiply, Performs A*B. Loads the lower 16 bits into ACC, loads the upper 16 bits into ACC2
DVA: Divide A, Performs A/B. Loads quotient into ACC, loads remainder into ACC2
DVB: Divide B, Performs B/A. Loads quotient into ACC, loads remainder into ACC2
LSA: Left Shift A, Shifts A left by B bits (only takes the lowest 4 bits of B)
LSB: Left Shift B, Shifts B left by A bits (only takes the lowest 4 bits of A)
RSA: Right Shift A, Shifts A right by B bits (only takes the lowest 4 bits of B)
RSB: Right Shift B, Shifts B right by B bits (only takes the lowest 4 bits of A)
XAD: Coordinates add, Does A+B as coordinates (adds them in 4-bit chunks without carries between them)
XSA: Coordinates subtract A, Does A-B as coordinates (subtracts them in 4-bit chunks without carries between them)
XSB: Coordinates subtract B, Does B-A as coordinates (subtracts them in 4-bit chunks without carries between them)
CAD: Colour add, Does A+B as a colour (adds them in 5-bit chunks without carries between them)
CSA: Colour subtract A, Does A-B as a colour (subtracts them in 5-bit chunks without carries between them)
CSB: Colour subtract B, Does B-A as a colour (subtracts them in 5-bit chunks without carries between them)
CSL: Colour shift left A, Shifts A left by 1 bit as a colour (Shifts it in 5-bit chunks without carries between them)
CNG: Colour Negate A, Negate A as a colour (Negates it in b-bit chunks without carries between them)
CAT: Colour add 2, Does A+B as a colour, without allowing overflows. (Adds it in 5-bit chunks and prevents values going over 31)
CSR: Colour shift right A, Shifts A right by 1 bit as a colour (Shifts it in 5-bit chunks without carries between them)

To create a complete ALU instruction, combine a code from ALU instructions 1 with one from ALU instructions 2.
For example:
ALB ADD = Load operand1 + [operand2] into operand3
AND LSA = Load [operand1] left shift by [operand2] bits into ACC

Conditional Jumps:
JPF: Jump flag immediate, jumps PC to operand1 dependent on the flags
JDF: Jump flag direct, jumps PC to [operand1] dependent on the flags
JPB: Jump bit immediate, jumps PC to operand1 dependent on a bit in the ACC
JDB: Jump bit direct, jumps PC to [operand1] dependent on a bit in the ACC
JPC: Jump clock immediate, jumps PC to operand1 dependent on clock
JDC: Jump clock direct, jumps PC to [operand1] dependent on clock

Each conditional jump needs additional data to complete them. 
Flag jumps:
The flag jumps have 6 additional control bits, which come in three pairs. The first (most significant) pair denote what we want from the greatest bit of the ACC. The second pair denote what we want from the carry. The third and final pair denote what we want from the equals 0 flag.
In each pair of bits, the first bit tells us if we care about the value of that bit, and the second bit tells us what value we want from that bit. If all the bits we care about equal what we want them to be, the PC is jumped. 
For example:
JPF 0c = JPF 001100 = Jump PC to operand1 if carry is true
JPF 0b = JPF 001011 = Jump PC to operand1 if carry is false and equals 0 is true
JPF 20 = JPF 100000 = Jump PC to operand1 if greatest bit is false

Bit jumps:
The bit jump wants 5 bits, the first bit tells us what we want the bit to equal, and the last 4 bits tells us what bit we care about.
For example:
JPB 14 = Jump PC to operand1 if bit 4 (the fifth least significant bit) is true
JPB 0f = Jump PC to operand1 if bit 15 (the most significant bit) is false
JPB 10 = Jump PC to operand1 if bit 0 (the least significant bit) is true

Clock jumps:
The clock jumps want a single bit which tells us what we want the clock to equal.
For example:
JPC 0 = Jump PC to operand1 if clock is low
JPC 1 = Jump PC to operand1 if clock is high

The assembly language expects all raw data to be in hexadecimal and expects spaces between data chunks. The assembler requires one instruction per line. 

For example:
LDV 0001 0100
LDV 0002 01ff
ALD ADD 0100 01ff 0101
PWS
JMP 0000

Comments can be written after a #.

For example:
#start
LDV 0001 0100 #Load 1 into 0100
LDV 0002 01ff #Load 2 into 01ff
ALD ADD 0100 01ff 0101 #Add them together
PWS #Ensure the simulation limit is not reached
JMP 0000 #Return to the start

The address of a certain instruction can be given a name using //. The // and the name of that address must be the last thing on that line, coming after comments. 

For example:
#start
LDV 0001 0100 #Load 1 into 0100 //START
LDV 0002 01ff #Load 2 into 01ff
ALD ADD 0100 01ff 0101 #Add them together
PWS #Ensure the simulation limit is not reached
JMP START #Return to the start

Variables can also be assigned after a %, with one variable per line. Similarly, to the //, the %, the variable and its value must be the last thing on the line, coming after comments. 

For example:
%aVarA = 0100
%aVarB = 01ff
%initialA = 0001
LDV initialA aVarA #Load 1 into aVarA //START
LDV 0002 aVarB #Load 2 into aVarB
ALD ADD aVarA aVarB 0101 #Add them together
PWS #Ensure the simulation limit is not reached
JMP START #Return to the start

Finally, the address of the code can be specified after an !. This should be done on a separate line. If the address is not specified at the start, the address defaults to 0x4000. Do note that whilst you may update the address that jumps are written to, the assembler will not add the required space to ensure that the data actually is at that address. 

For example: 
!4400
#Load into the second EEPROM bank in the cart. 
%aVarA = 0100
%aVarB = 01ff
%initialA = 0001
LDV initialA aVarA #Load 1 into aVarB //START
LDV 0002 aVarB #Load 2 into aVarB
ALD ADD aVarA aVarB 0101 #Add them together
PWS #Ensure the simulation limit is not reached
JMP START #Return to the start

The assembler can also format data tables written in hexadecimal. 

The Femto-4 Address Space
"""""""""""""""""""""""""
The Femto-4 has a 16-bit address space. The address space is divvied up in the following way (all addresses in hex):
0000-007f: Bootloader
00c7: ACC2
00ca: MODE
00cb: PROTECT
00cc: CART BANK SELECT
00b0: Stack Pointer
00ff: RANDOM
0100-01ff: General Registers
1000-1fff: WRAM
2000-2fff: Stack
3000: Controller 1 Pushed
3001: Controller 1 Held
3002: Controller 2 Pushed
3003: Controller 2 Held
3004: Keyboard
3200: TTY (Text Output)
3201: Output (Debug Only)
33c0-33ff: PPURAM
3c00-3fff: Save EEPROM
4000-7fff: Selected Bank 1
8000-bfff: Selected Bank 2
c000-ffff: Selected Bank 3

The Femto-4 Assembly language has the following pre-assigned addresses:
TTY: 3200
OUTPUT: 3201
CTRLR1P: 3000
CTRLR1H: 3001
CTRLR2P: 3002
CTRLR2H: 3003
KYBD: 3004
RND: 00ff
MODE: 00ca
PRCT: 00cb
SELECT: 00cc
STKPNTR: 00b0
ACC2: 00c7
FLG: 00c8

Execution Modes
"""""""""""""""
The Femto-4 has several execution modes that can change how quickly the Femto-4 executes code. The Mode register and the Protect register are the key registers for this feature. 
Bits 0-2 (the 3 least significant) of the mode register control how instructions are executed in relation to the clock. 
The bit 0 (the least significant bit) enables fast execution on the rising edge
The bit 1 enables fast execution on the falling edge
The bit 2 (the most significant bit) enables protection 

Should fast execution be enabled on neither edge of the clock, the Femto-4 executes one instruction per clock pulse. 

Fast execution allows multiple instructions to be executed on a single clock pulse. This is required since CircuitVerse limits the clock speed to 10Hz (the clock state flips at 20Hz), which is not very fast. Fast execution will execute code until either a PWS or GRF instruction, or, if protection is enabled, the number of instructions executed is equivalent to the protection value. Executing too many instructions in a single clock pulse will cause CircuitVerse's simulation to stop, so ensuring code can run safely is important. Protection works best when the graphics do not update at precise times, allowing long blocks of instructions to run without having to write in the PWS instructions. However, tailored PWSes will always be slightly better since different instruction have different limits. 64 LDV instructions can easily run in one clock pulse, whilst only around 32 ALB instructions can run in one clock pulse. For regular graphics updates, it is better to run unprotected, since this gives you full control of when the execution is paused, allowing you to ensure that graphics update at the right time in relation to your code.

For example:
7 = 0111 = Protected dual edge fast execution
0 = 0000 = Non-fast execution
6 = 0110 = Protected falling edge fast execution

Bits d-f (the 3 most significant bits) of the mode register control how the graphics update.
The bits e-f (the two most significant bits) control when the graphics update. The four modes are:
00: Normal speed (on the falling edge of the clock pulse)
01: Double speed (on both edges of the clock pulse)
10: Half speed (on the falling edge of every other clock pulse)
11: Code Controlled (Whenever a GRF instruction is run)

Bit d (the third most significant bit) disables graphics updates when it is set high. 

For example:
c003 = Unprotected, dual edge fast execution with code-controlled graphics
2007 = Protected, dual edge fast execution without graphics
0005 = Protected, rising edge fast execution with normal speed graphics

Whilst the mode and protect register can be written to multiple times in a single clock pulse, the actual values that control execution are only updated on the rising edge of the clock. 

By default, the bootloader sets the mode to 0x0007 and the protection to 0x0010

Graphics (16x16)
""""""""""""""""
The Femto-4 can drive a 16x16 pixel screen with 32 sprites. Each sprite is a rectangle with a colour. The sprites are stored in the PPURAM. The sprite data is stored in pairs, with the first 16 bits being the coordinates of the rectangle's corners, and the second 16 bits being the sprites colour. The sprites are drawn in order from 33c0 to 33fe, so sprites stored at larger addresses are drawn on top of sprites stored at smaller addresses. Pixels where a sprite is not drawn retain their value, so should you want the screen to completely refresh every frame, you will need a background sprite that covers the full screen. 

The sprite data format is as follows:
Formats are done as a list of what the bits represent and how many bits are used:
For example:
x (4), y (4) represents the x coordinate being first, and using 4 bits, followed by the y coordinate which is also 4 bits. 
Coordinates:
The coordinates 16 bits store the coordinates of the two opposite corners of the rectangle. The format is:
x1 (4), x2 (4), y1 (4), y2 (4)
In order to drive a 16x16 screen, the coordinates of x2 and y2 are increased by 1, such that a sprite's width is x2-x1+1 and a sprite's height is y2-y1+1. Due to this, it is recommended that x1<x2 and y1<y2. Coordinates are the same as a monitor's coordinate system, with right being positive x and down being positive y. 

For example:
0324 will draw to this area:
  0 1 2 3 4 5 6 7 8 9 a b c e d f 
0    
1 
2 X X X X 
3 X X X X
4 X X X X
5
6
7
8
9
a
b
c
d
e
f

Colours:
The colours are 15-bit direct colour with an enable flag at the end. The order is:
r (5), g (5), b (5), a (1)
If a is false, then the sprite will not be drawn to the screen. 

For example:
ffff = white
0001 = black
f801 = Red
ffc1 = Yellow
fbee = Transparent (Not drawn)

A full sprite example:
33c0 = 0f0f
33c1 = 07ff
Sprite will fill whole screen cyan

33c2 = 8f07
33c3 = f801
Sprite will fill the top right quadrant red

33c4 100f
33c5 0001
Sprite has width of 0 and will not be drawn

33c6 078f
33c7 fffe 
Sprite is not enabled, sprite will not be drawn

End result: top right quadrant red (since it was drawn on top of the cyan sprite), rest cyan. 

The PPURAM is cleared when the reset button is pressed, and the bootloader writes 0f0f into 33c0 and 0001 into 33c1, clearing the screen, so that programs that rely on the screen not refreshing will have a clean slate to work with. 

Graphics (32x32)
""""""""""""""""
The Femto-4 can drive a 32x32 pixel screen with a different PPU. Each sprite can either be a coloured rectangle or a coloured pixel. Unlike the 16x16 PPU, the 32x32 PPU does not treat the two 16-bit addresses separately and combines them in order to gain all the data it requires. Each sprite can be in one of 3 modes. Bits d-f (the 3 most significant bits) are the mode, leaving 29 bits for the sprite's data. Sprites with unused modes are not drawn to the screen. 

Mode 1: Maximises the colour depth of the sprite, sacrificing the ability to draw rectangles. The data is arranged: 
unused (1), x (5), y (5), r (6), g (6), b (6)

Mode 2: Allows the sprite to be a rectangle, sacrificing the colour depth. The data is arranged:
x1 (5), x2 (5), y1 (5), y2 (5), r (3), g (3), b (3)
As with the 16x16 screen, the second coordinates are offset by 1, resulting in the rectangle's dimensions being x2-x1+1, y2-y1+1. 

Mode 3: Uses the same colour format as the 16x16 screen, but a different coordinate format. Cannot be used to draw rectangles. The data is arranged:
unused (3), x (5), y (5), r (5), g (5), b (5), a (1)
This mode a) separates the colour from the coordinates making it somewhat easier to handle, and b) allows 16x16 colours to be used on the 32x32 screen, which makes converting code between the two versions easier. 

The screen is drawn in teh same way as the 16x16 screen, with the only difference being the interpretation of the data. 

Updating Graphics
"""""""""""""""""
It is best not to update PPURAM values when the graphics are being updated, since they may not update correctly. Therefore, in normal and half speed execution modes, PPURAM values should be updated when the clock is high. This is why the jump if clock instructions exist, they allow us to ensure code is being executed on the right side of the clock.

Bank Selection
""""""""""""""
The memory in the carts is switchable, allowing far more data to be accessed on a more limited address space. The bank select register defines which of the 32 potential cart slots are enabled. The register is formatted as follows:
b3 b2 b1, with each bank being a 5-bit number. b1 specifies the bank that is mapped to the first cart slot, addresses 0x4000-0x7fff. b2 specifies the bank that is mapped to the second slot, addresses 0x8000-0xbfff. b3 specifies the bank in the third slot, addresses 0xc000-0xffff. By default, the bootloader enables bank 1 in slot 1, bank 2 in slot 2, and bank 3 in slot 3. The least significant bit plays no role, and can be ignored. I refer to banks using 1 based indexing, but the values used to activate them are 0 based, so remember to convert the values before using them. 

For example:
2200 = 0100 0100 0000 0000 = 01000 10000 00000 = Banks 1, 2 and 3 enabled
0250 = 0000 0100 1010 0000 = 00000 10010 10000 = Banks 17, 19, and 1 enabled

General Registers
"""""""""""""""""
The Femto-4 has 256 'general registers', ranging from address 0x0100 to 0x01ff. These registers are easier for the ALU to access. These registers are only significant when using an ANR/ALR instruction. In these instructions, the data the ALU handles must come from the registers. The ANR instruction has only one operand. The lower (least significant) eight bits denote the register address of operand B, and the higher 8 bits denote the register address of operand A. Register address are the last 8 bits of the register's address. The ALR instruction has two operands, one which denotes using register addresses the inputs, and one which is where to load the result to in the standard address system. 

For example:
ANR ADD 02ff = Add 0102 and 01ff and load the result into ACC
ALR AND 013f 0101 = And 0101 and 013f and load the result into 0101

Driving Controllers
"""""""""""""""""""
The Femto-4 has two controllers, which have two addresses dedicated to controlling them each. 

The first address is the pushed address. This stores the latched outputs from the controller, so that if a button is pressed and released, the button press will still be registered. Reading from the address will return the value of the latched buttons. Writing to the address will clear the latches, resetting them to 0. 

The second address is the held address. This stores the currently pushed buttons from the controller, and therefore will only register an input if the button is being pressed when the data is read. Reading the address will return the value of the latched buttons. Writing to the address does nothing. 

The buttons are assigned bits in the output in the following way:
0: > (Right)
1: v (Down)
2: < (Left)
3: ^ (Up)
4: A
5: B
6: Y
7: X
9: Start
a: Select

Both controllers' pressed outputs are reset by the bootloader. 

Whilst bit testing allows us to easily test 1 bit, we can test multiple bits using an AND instruction, and jumping depending on whether the result equals 0. We can also do multi bit testing, by performing an AND and then checking if the result equals 0. This allows us to test if all the bits we care about equal 0, or if one of them is 1. We can also negate the value, and test if all the bits equal 1, or if any bit equals 0. 

Controller Keyboard Mappings (v2.2 and beyond only)
"""""""""""""""""""""""""""""""""""""""""""""""""""
Keyboard to controller mappings are handled by the WASD Pad. It fully maps both controllers to the keyboard, allowing two players to play at the same time by sharing a keyboard. The WASD Pad can take up to 15 inputs in each clock cycle. Inputs beyond those 15 inputs will be ignored. The keyboard mappings can be changed by changing the values in the WASD pad itself. The mapping was designed on a British keyboard. 

The default mapping is as follows:
Controller 1:
0: >: d
1: v: s
2: <: a
3: ^: w
4: A: b
5: B: v
6: Y: x
7: X: f
9: Start: e
a: Select: q
Controller 2:
0: >: l
1: v: k
2: <: j
3: ^: i
4: A: /
5: B: .
6: Y: ,
7: X: ;
9: Start: o
a: Select: u

Driving the Keyboard
""""""""""""""""""""
The keyboard has one address associated with it. Reading from that address reads the next value in the buffer. Writing 0 to the address clears the buffer. Writing any other value to the address removes one character from the buffer allowing the next one to be read. The keyboard is cleared by the bootloader. 

Driving the TTY
"""""""""""""""
The TTY has one address associated with it. Reading from it does nothing. Writing 0 to it clears it. Writing any other value will push that value's ASCII value into the TTY. The TTY is cleared by the bootloader

Using ASCII
"""""""""""
The Assembler has a set of preset variables that allow ASCII values to be easily loaded without remembering them. In general, the name for the ASCII value is the character with a ' in front. Since spaces are used to separate data chunks, the space shorthand is '_, whilst the underscore shorthand is '__. Since the ! is used for address updating, the ! shorthand is 'exclamation. 

For example:
LDV 'H TTY
LDV 'e TTY
LDV 'l TTY
LDV 'l TTY
LDV 'o TTY
LDV 'exclamation TTY
LDV '_ TTY
#Prints "Hello! "

Driving RNG
"""""""""""
The RNG has one address associated with it. Reading from it reads the current random value. Writing X to it will generate a new random number with the maximum value of X. 

Using the Utility EEPROM Bank
"""""""""""""""""""""""""""""
The utility EEPROM Bank will hold a series of utility functions. (It is still being written). It expects to be the third chip enabled and will not work if it is enabled in any other position. Its functions' addresses already have values in the assembler that can be used. 

Currently it has two functions:

BinaryToBCD:
#Inputs: Binary Number, Return Address
#Outputs: Number of Digits, BCD from most to least significant

BCDToASCII:
#Inputs: BCD Digit, Return Address
#Outputs: ASCII Character

Planned functions:
ASCIIToBCD
BCDToBinary
BinaryToASCIIHex

To use these functions, push the function's inputs onto the stack and jump to it. At the return value, popping from the stack will yield the outputs in the order specified.

For example:

#Convert 0xf3 (243) into BCD
PSV 00f3
PSV RETURN
JMP BinaryToBCD

PPD 0100 #Output 1, the number of digits (3). The function will return execution here //RETURN
PPD 0101 #Output 2, the most significant digit (2)
PPD 0102 #Output 3, the second digit (4)
PPD 0103 #Output 4, the least significant digit (3). Should the output be of an unknown length, use a for loop to read off the digits. 

Note that the functions will use the general registers, so any data values you need to keep afterwards should be moved to ensure that they are not overwritten. (You can see the utility cart's assembly here to see what addresses it uses).

Resetting
"""""""""
Pressing the reset button will clear all special registers, the mode, protection, and the PPURAM. Since the PC is reset to 0x0000, the Femto-4 runs the bootloader, which sets up the default values. It will: set the protection to 0x0010, execution mode to 0x0007, and set bank 1 to slot 1, bank 2 to slot 2, and bank 3 to slot 3. It will then clear the screen, setting all the pixels to black, clear the TTY, controllers, and keyboard, and then jump to 0x4000 when the clock is high. Therefore, your code should start in bank 1, and from there you have full control of the program. 

Using the Fact that the Femto-4 has a Von Neumann Architecture
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Since the Femto-4 has a Von Neumann Architecture, we can perform certain instructions that are not in the Femto-4's instruction set. For example, we cannot load a value into the ALU using a pointer, we always must load it from a specified address. Therefore, what we could do is put some simple code around the pointer that would load the required data into the pointer value. Jumping to that location would execute that code, preforming the required task. 

Debugging
"""""""""
The Femto-4 has two debug versions, the in debug, and the main debug. The in debug version of the Femto-4 allows you to easily see how the register values are changing in real time. Additionally, it contains several buttons that allow you to change how the code is executed. The MDOE input allows you to overwrite the execution mode with MDO, allowing you to slow down fast execution. The MAROE input allows you to overwrite the MAR output with MARO, and the DIOE allows you to overwrite the MDR output with DIO. The GOE allows you to replace the graphics fast execution limit with GO, allowing you to draw the first X sprites. Disabling clock enable, allows you to pulse the clock yourself using the clock button, allowing you to go through the code at the speed you want. The step button will only execute a single instruction, whatever the mode. It does not interact well with clock jump instructions. Additionally, there are read and write buttons which allow you to read and write to the address space. 

Main debug allows you to see several key register values over time in binary rather than hex. This version has the Femto-4 as a sub circuit. All the available debug tools work in the same way. Unfortunately, since the debug version has all these debug tools, it is unable to execute code as quickly as the main version, and so stack simulation errors may appear on it that do not appear on the main version. The main debug also has an additional debug output buffer, where outputted values are written to a collection of D-flipflops. This allows you to output values and see what they are. Additionally, you can also output debug messages into the TTY. 

The Femto-4 Assembler will catch the following errors:
Invalid OP Codes
Invalid number of operands
Incorrect hex values/unassigned variable names

If you find any bugs in the Femto-4 itself, do add a comment or a fork so that I can see it and fix it!

Bug List
""""""""
Unfixed:
Any bugs you report goes here!

Fixed:
Code controlled graphics always exceed the simulation limit. 
ALU register instructions don't work.
Multiple memory banks get written to when writing to memory banks. 
In debug ALU register instructions don't work. 
Contention issue when multiplying. 
LII instruction not working.
LIA and LDA instructions not working.

Adding External Chips into the Address Space
""""""""""""""""""""""""""""""""""""""""""""
Naturally, the banks in your cart can contain anything, and provided that your cart does not add more connections on the left side, you can add as many connections to your cart as you want, allowing you to add temporary external chips that connect through the cart. A specialised chip in your cart has to be interacted with by loading data, and therefore cannot compete against the ALU in instructions the ALU can already do. Instead, specialised chips are best used as a hardware solution to a software problem; if the problem is easy to implement as hardware, but takes several lines of code to run as software, than this is an option to consider. 

Cart A, Flappy Bird, and Cart D, Snake shows the difference between the two. Cart A does not use any specialised chips, and does everything using the Femto-4's existing hardware, even if it introduces certain limitations and increases how many lines of code are required. Cart D is almost entirely driven by a specialised chip, which handles the buffer that stores the snake's path, as well as handling the snake's collisions with the edges. Thanks to this, the code can be a lot simpler. 

You can also add permanent additional small chips using an MWrapper. Connecting the MWrapper to the main address space buses will allow the address space to interact with the chip. On the left side are all the address space connections, and on the right are the external chip connections. The RA input is the address at which the CDO input is mapped. The CDI output is the value being written to the chip, and the CW input is the line telling the chip when to write. The external chip can then use the inputs however is required. Wrappers that map to more of the address space will have to be constructed, should you require them. 

The End
"""""""
I hope that this guide is useful should you wish to develop for the Femto-4. If you have any questions do comment, and if you make any impressive carts, or useful functions, do send them my way. Feel free to look through my own assembly code to try and gain an understanding of how to program for the Femto-4. (Sorry that it is not commented).
