
  tokenStateMap = {}

  #Returned state. State at the start of a new line
  tokenState = {}
  for i in spaces:
    tokenState[i] = "R"
  for i in letters:
    tokenState[i] = "T"
  for i in digits + operators + negators + compareChars + assigners + brackets:
    tokenState[i] = "ERROR"
  for i in comments:
    tokenState[i] = "C"
  for i in returns:
    tokenState[i] = "R"
  tokenState["{"] = "R"
  tokenState["}"] = "R"
  tokenStateMap["R"] = tokenState
  
  #Text state. State for identifiers
  tokenState = {}
  for i in spaces:
    tokenState[i] = "S"
  for i in letters + digits:
    tokenState[i] = "T"
  for i in negators:
    tokenState[i] = "R"
  for i in operators:
    tokenState[i] = "O1"
  tokenState["+"] = "+1"
  for i in compareChars:
    tokenState[i] = "<>"
  for i in assigners:
    tokenState[i] = "=1"
  for i in comments:
    tokenState[i] = "C"
  for i in returns:
    tokenState[i] = "R"
  tokenState["{"] = "R"
  tokenState["}"] = "R"
  tokenStateMap["T"] = tokenState

  #Space state. State to separate text states
  tokenState = {}
  for i in spaces:
    tokenState[i] = "S"
  for i in letters:
    tokenState[i] = "T"
  for i in digits:
    tokenState[i] = "N"
  for i in operators:
    tokenState[i] = "O1"
  tokenState["+"] = "+1"
  for i in compareChars:
    tokenState[i] = "<>"
  for i in assigners:
    tokenState[i] = "=1"
  for i in comments:
    tokenState[i] = "C"
  for i in returns:
    tokenState[i] = "R"
  tokenState["{"] = "R"
  tokenState["}"] = "R"
  tokenStateMap["S"] = tokenState

  #Number state
  tokenState = {}
  for i in spaces:
    tokenState[i] = "N"
  for i in letters:
    tokenState[i] = "ERROR"
  for i in digits:
    tokenState[i] = "N"
  for i in operators:
    tokenState[i] = "O1"
  tokenState["+"] = "+1"
  for i in compareChars:
    tokenState[i] = "<>"
  for i in comments:
    tokenState[i] = "C"
  for i in returns:
    tokenState[i] = "R"
  tokenState["{"] = "R"
  tokenState["}"] = "R"
  tokenStateMap["N"] = tokenState

  #Operator state
  tokenState = {}
  for i in spaces:
    tokenState[i] = "O1"
  tokenState["+"] = "+1"
  for i in letters:
    tokenState[i] = "T"
  for i in digits:
    tokenState[i] = "N"
  for i in operators:
    tokenState[i] = "ERROR"
  for i in compareChars:
    tokenState[i] = "ERROR"
  for i in negators:
    tokenState[i] = "O2"
  for i in assigners:
    tokenState[i] = "=2"
  for i in comments:
    tokenState[i] = "ERROR"
  for i in returns:
    tokenState[i] = "ERROR"
  tokenState["{"] = "ERROR"
  tokenState["}"] = "ERROR"
  tokenStateMap["O1"] = tokenState

  #+ state
  tokenState = {}
  for i in spaces:
    tokenState[i] = "+1"
  for i in letters:
    tokenState[i] = "T"
  for i in digits:
    tokenState[i] = "N"
  for i in operators:
    tokenState[i] = "ERROR"
  tokenState["+"] = "+2"
  for i in compareChars:
    tokenState[i] = "ERROR"
  for i in negators:
    tokenState[i] = "O2"
  for i in assigners:
    tokenState[i] = "=2"
  for i in comments:
    tokenState[i] = "ERROR"
  for i in returns:
    tokenState[i] = "ERROR"
  tokenState["{"] = "ERROR"
  tokenState["}"] = "ERROR"
  tokenStateMap["+1"] = tokenState

  #+ state
  tokenState = {}
  for i in spaces:
    tokenState[i] = "+2"
  for i in letters + digits + operators + compareChars + negators + assigners:
    tokenState[i] = "ERROR"
  for i in comments:
    tokenState[i] = "C"
  for i in returns:
    tokenState[i] = "R"
  tokenState["{"] = "R"
  tokenState["}"] = "R"
  tokenStateMap["+2"] = tokenState

  #Negator state
  tokenState = {}
  for i in spaces:
    tokenState[i] = "O2"
  for i in letters:
    tokenState[i] = "T"
  for i in digits:
    tokenState[i] = "N"
  for i in operators + boolOperators + negators + assigners + compareChars + comments:
    tokenState[i] = "ERROR"
  for i in returns:
    tokenState[i] = "ERROR"
  tokenState["{"] = "ERROR"
  tokenState["}"] = "ERROR"
  tokenStateMap["O2"] = tokenState

  #First = sign
  tokenState = {}
  for i in spaces:
    tokenState[i] = "=1"
  for i in letters:
    tokenState[i] = "T"
  for i in digits:
    tokenState[i] = "N"
  for i in operators + boolOperators + compareChars:
    tokenState[i] = "ERROR"
  for i in negators:
    tokenState[i] = "O2"
  tokenState["="] = "=3"
  for i in comments:
    tokenState[i] = "ERROR"
  for i in returns:
    tokenState[i] = "ERROR"
  tokenState["{"] = "ERROR"
  tokenState["}"] = "ERROR"
  tokenStateMap["=1"] = tokenState

  #= sign after operator
  tokenState = {}
  for i in spaces:
    tokenState[i] = "=2"
  for i in letters:
    tokenState[i] = "T"
  for i in digits:
    tokenState[i] = "N"
  for i in operators + boolOperators + compareChars:
    tokenState[i] = "ERROR"
  for i in negators:
    tokenState[i] = "O2"
  tokenState["="] = "ERROR"
  for i in comments:
    tokenState[i] = "ERROR"
  for i in returns:
    tokenState[i] = "ERROR"
  tokenState["{"] = "ERROR"
  tokenState["}"] = "ERROR"
  tokenStateMap["=2"] = tokenState

  #= sign after comparators
  tokenState = {}
  for i in spaces:
    tokenState[i] = "=3"
  for i in letters:
    tokenState[i] = "T"
  for i in digits:
    tokenState[i] = "N"
  for i in operators + boolOperators:
    tokenState[i] = "ERROR"
  for i in negators:
    tokenState[i] = "O2"
  for i in comments:
    tokenState[i] = "ERROR"
  for i in returns:
    tokenState[i] = "ERROR"
  tokenState["{"] = "ERROR"
  tokenState["}"] = "ERROR"
  tokenStateMap["=3"] = tokenState

  #comparator state
  tokenState = {}
  for i in spaces:
    tokenState[i] = "<>"
  for i in letters:
    tokenState[i] = "T"
  for i in digits:
    tokenState[i] = "N"
  for i in operators + boolOperators:
    tokenState[i] = "ERROR"
  for i in compareChars:
    tokenState[i] = "=3"
  for i in negators:
    tokenState[i] = "O2"
  for i in comments:
    tokenState[i] = "ERROR"
  for i in returns:
    tokenState[i] = "ERROR"
  tokenState["{"] = "ERROR"
  tokenState["}"] = "ERROR"
  tokenStateMap["<>"] = tokenState

  #=Comment state
  tokenState = {}
  for i in spaces + letters + digits + operators + boolOperators + negators + assigners + comments:
    tokenState[i] = "C"
  for i in ";\n":
    tokenState[i] = "R"
  tokenStateMap["C"] = tokenState

  #print(tokenStateMap)

  tokenStateMachine = StateMachine(tokenStateMap, "R")

  source = open("Source.txt", "r")

  string = ""
  tokenised = []
  previousState = "R"
  line = 1
  previousLine = ""
  lineText = ""
  #i=0
  while True:
    char = source.read(1)
    if char == "":
      break
    elif char == "\n":
      line += 1
      previousLine = lineText
      lineText = ""
    else:
      lineText += char
    tokenStateMachine.updateState(char)
    if tokenStateMachine.state == "ERROR":
      print(previousLine)
      print(lineText)
      print("Error on line " + str(line))
      source.close()
      return
    if previousState != tokenStateMachine.state:
      if previousState == "=3" or previousState == "=2" or previousState == "+2":
        tokenised[-1][0] += string
        tokenised[-1][1] = previousState
      elif previousState == "+1":
        tokenised.append([string,"O1"])
      elif previousState != "C" and previousState != "S" and string != "":
        tokenised.append([string,previousState])
      string = ""
    #print(previousState, tokenStateMachine.state, char, (previousState != "C"))
    previousState = tokenStateMachine.state
    if not char in spaces:
      string += char
    #i+=1 

  source.close()